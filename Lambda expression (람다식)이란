람다식 (Lambda expression)은 함수를 간결하게 표현하는 문법임.

람다식의 기본 구조

  val 함수이름: (매개변수 타입) -> 반환 타입 = { 매개변수 -> 실행 코드 }

Example

// 일반 함수 선언
fun add(a: Int, b: Int): Int {
    return a + b
}

// 람다식으로 변환
val addLambda: (Int, Int) -> Int = { a, b -> a + b }

fun main() {
    println(add(3, 5))       // 일반 함수 호출: 8
    println(addLambda(3, 5)) // 람다식 호출: 8
}

람다식의 특징

1)타입 생략이 가능하다.
  val multiply = { a: Int, b: Int -> a * b } //타입을 명시하지 않아도 자동으로 추론 가능하다.
  println(multiply(2, 3))  // 출력: 6

2) 매개변수가 한개 일때 it 키워드를 사용하여 간결하게 작성할 수 있다. //it은 람다식에서 단일 매개변수를 참조할 때 자동으로 사용할 수 있는 키워드
  val square = { it: Int -> it * it }
  println(square(5))  // 출력: 25

3)반환값이 여러줄이면 {}를 사용할 수 있다.
  val greet: (String) -> String = { name ->
      val message = "안녕하세요, $name님!"
      message // 마지막 줄이 반환값
  }
  println(greet("철수"))  // 출력: 안녕하세요, 철수님!


람다식은 함수를 다른 함수의 인자로 전달할 때 자주 사용

fun calculate(a: Int, b: Int, operation: (Int, Int) -> Int): Int {   //calculate 함수는 Int 두 개와 람다식(operation)을 인자로 받음.
    return operation(a, b) 
}

fun main() {
    val sum = calculate(10, 5) { x, y -> x + y } 
    val product = calculate(10, 5) { x, y -> x * y }

    println(sum)      // 출력: 15
    println(product)  // 출력: 50
}

람다식에서 return 사용시 주의!! (람다식 내부에서 return 사용시 비지역 반환(non-local return)이 발생)

fun main() {
    val numbers = listOf(1, 2, 3, 4, 5)

    numbers.forEach {
        if (it == 3) return // 전체 함수 종료
        println(it)
    }

    println("이 문장은 실행되지 않음")
}

== 출력 안됨 (return을 만나면 main 함수 전체가 종료

return@label을 사용시 특정 람다식에서만 반환.

fun main() {
    val numbers = listOf(1, 2, 3, 4, 5)

    numbers.forEach label@{
        if (it == 3) return@label
        println(it)
    }

    println("이 문장은 실행됨")
}
